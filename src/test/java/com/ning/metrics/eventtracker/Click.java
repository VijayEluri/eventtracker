/*
 * Copyright 2010 Ning, Inc.
 *
 * Ning licenses this file to you under the Apache License, version 2.0
 * (the "License"); you may not use this file except in compliance with the
 * License.  You may obtain a copy of the License at:
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

package com.ning.metrics.eventtracker;

import org.apache.thrift.TException;
import org.apache.thrift.protocol.TField;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.protocol.TProtocolUtil;
import org.apache.thrift.protocol.TStruct;
import org.apache.thrift.protocol.TType;

/**
 * Auto-generated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

public class Click implements java.io.Serializable {

  public String impression_token;
  public long date;
  public String user_agent;

  public transient final Isset __isset = new Isset();
  public static final class Isset {
    public boolean impression_token = false;
    public boolean date = false;
    public boolean user_agent = false;
  }

  public Click() {
  }

  public Click(
    String impression_token,
    long date,
    String user_agent)
  {
    this();
    this.impression_token = impression_token;
    this.__isset.impression_token = true;
    this.date = date;
    this.__isset.date = true;
    this.user_agent = user_agent;
    this.__isset.user_agent = true;
  }
  
  public void read(TProtocol iprot) throws TException
  {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id)
      {
        case 1:
          if (field.type == TType.STRING) {
            this.impression_token = iprot.readString();
            this.__isset.impression_token = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2:
          if (field.type == TType.I64) {
            this.date = iprot.readI64();
            this.__isset.date = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3:
          if (field.type == TType.STRING) {
            this.user_agent = iprot.readString();
            this.__isset.user_agent = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
  }

  public void write(TProtocol oprot) throws TException {
    TStruct struct = new TStruct("SearchResultClick");
    oprot.writeStructBegin(struct);
    TField field;
    if (this.impression_token != null) {
      field = new TField("impression_token", TType.STRING, (short) 1);
      oprot.writeFieldBegin(field);
      oprot.writeString(this.impression_token);
      oprot.writeFieldEnd();
    }
    field = new TField("date", TType.I64, (short) 2);
    oprot.writeFieldBegin(field);
    oprot.writeI64(this.date);
    oprot.writeFieldEnd();
    if (this.user_agent != null) {
      field = new TField("user agent", TType.STRING, (short) 3);
      oprot.writeFieldBegin(field);
      oprot.writeString(this.user_agent);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuilder sb = new StringBuilder("SearchResultClick(");
    sb.append("impression_token:");
    sb.append(this.impression_token);
    sb.append(",date:");
    sb.append(this.date);
    sb.append(",user_agent:");
    sb.append(this.user_agent);
    sb.append(")");
    return sb.toString();
  }

}

